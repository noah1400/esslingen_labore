    XDEF initClock
    XDEF tickClock
    XDEF scnds, mins, hrs, time
    
    XREF initLED, clrLED, toggleLED
    
.data: SECTION

scnds:    DS.B  1
scndsTXT: DS.B  3 ; e.g. 35 -> "35\n"
mins:     DS.B  1
minsTXT:  DS.B  3
hrs:      DS.B  1
hrsTXT:   DS.B  3

mode:       DS.B  1 ;0 = Normal Mode, 1 = Set Mode

time:  DS.B  9 ;HH:MM:SS\n 


.init: SECTION

initClock:
  JSR   initLED ; Initialize LEDs
  rts
  

tickClock:
  PSHB
  
  ; LED0 toggles once per second
  ; LED7 on in setmode
  
  ; toggling LED0
  LDAB  #$80
  JSR   toggleLED
  ; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  ; TODO: check correctness of setLED
  ; Output whole register B?
  ; Or just set single bits
  ; Same for clrLED
  ; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  
  LDAB  mode
  CMPB  #1
  BEQ   exitTick ; If in Set Mode exit tick
  
  ; tick clock
  ; Increment seconds
  JSR   incrementAndCheckSecondOverflow
  
  ; update output string
  JSR   updateTime
  
  ; output string
  JSR   outputTime
  
  PULB
  rts
  
updateTime:
  
  rts
  
outputTime:

  rts
  
  

; ###########################################################
; tick section  
incrementAndCheckSecondOverflow:
  LDAB  scnds
  INCB
  STAB  scnds
  CMPB  #60
  BEQ   incrementAndCheckMinuteOverflow
  RTS
incrementAndCheckMinuteOverflow:
  ; seconds overflowed
  ; reset seconds
  LDAB  #0
  STAB  scnds
  ; increment minutes
  LDAB  mins
  INCB
  STAB  mins
  CMPB  #60
  BEQ   incrementAndCheckHourOverflow
  RTS
incrementAndCheckHourOverflow:
  ; minutes overflowed
  ; reset minutes
  LDAB  #0
  STAB  mins
  ; increment hours
  LDAB  hrs
  INCB
  STAB  hrs
  CMPB  #24
  BEQ   resetHours
  RTS
resetHours:
  ; hours overflowed
  ; reset hours
  LDAB  #0
  STAB  hrs
  RTS
; end tick section
; ###########################################################


  
exitTick:
  PULB
  rts
